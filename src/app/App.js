import React, {useEffect, useState} from 'react'import Auth from "../pages/Auth/Auth";import Todolist from '../pages/Todolist/Todolist'import Users from '../pages/Users/Users'import ErrorBoundary from '../errorBoundary/ErrorBoundary'import {BrowserRouter as Router, NavLink, Switch, Redirect, Route} from 'react-router-dom'import './App.css'import {connect} from "react-redux";import {authLogout, setIsLogin, setToken} from "../redux/actions/auth";import Logout from "../components/Logout/Logout";function App({state, setToken, setIsLogin, authLogout}) {  const [firstRender, setFirstRender] = useState(true)  useEffect(() => {    console.log('-1 RENDER_APP-')    setFirstRender(false)    setToken(localStorage.getItem('token'))    if (localStorage.getItem('isLogin')) {      setIsLogin(JSON.parse(localStorage.getItem('isLogin')))    }    if (state.token) {      const expirationDate = new Date(localStorage.getItem('expirationDate'))      if (expirationDate <= new Date()) {        setIsLogin(true)        localStorage.clear()        authLogout()      }    }    if (firstRender) {      console.log('-2 RENDER_APP-')    }  }, [firstRender, authLogout, state.token, setToken, setIsLogin, state.setIsLogin])  return (    <ErrorBoundary>      <Router>        <div className='routing'>          {state.token            ?            <>              {state.isAdmin                ?                <>                  <NavLink to='/users'>Users</NavLink>                  <NavLink to='/todolist'>Todolist</NavLink>                </>                : null}              <NavLink to='/logout'>Logout</NavLink>            </>            : null          }        </div>        {state.token ? <hr/> : null}        <div className='App'>          <Switch>            {state.token              ?              <>                {state.isAdmin                  ? <Route exact path='/users' component={Users}/>                  : null                }                <Route exact path='/todolist' component={Todolist}/>                <Route exact path='/logout' component={Logout}/>              </>              :              <>                <Route exact path='/' component={Auth}/>                <Redirect to='/'/>              </>            }            {/*<Route render={() => <h1>404 not found</h1>}/>*/}          </Switch>        </div>      </Router>    </ErrorBoundary>  )}export default connect(  state => ({state: state.auth}),  {setToken, setIsLogin, authLogout})(App)
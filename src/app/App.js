import React, {useEffect, useState} from 'react'import Auth from "../pages/Auth/Auth";import Todolist from '../pages/Todolist/Todolist'import Users from '../pages/Users/Users'import Logout from "../components/Logout/Logout";import ErrorBoundary from '../errorBoundary/ErrorBoundary'import {NavLink, Switch, Redirect, Route} from 'react-router-dom'import './App.css'import {connect} from "react-redux";import {logout, setIsLogin, setCurrentPerson} from "../redux/actions/auth";function App({setIsLogin, logout, setCurrentPerson}) {  const token = localStorage.getItem('token')  const currentPerson = JSON.parse(localStorage.getItem('currentPerson'))  useEffect(() => {    setCurrentPerson(JSON.parse(localStorage.getItem('currentPerson')))    const expirationDate = new Date(localStorage.getItem('expirationDate'))    if (expirationDate <= new Date()) {      setIsLogin(true)      logout()    }  }, [])  return (    <ErrorBoundary>      <div className='routing'>        {token          ?          <>            {currentPerson              ?              <span className='currentUser'>Signed in as {                currentPerson.name + ' ' + currentPerson.surname}</span>              : null            }            {currentPerson && currentPerson.role === 'admin'              ?              <>                <NavLink to='/users'>Users</NavLink>                <NavLink to='/todolist'>Todolist</NavLink>              </>              : null}            <NavLink to='/logout'>Logout</NavLink>          </>          : null        }      </div>      {token ? <hr/> : null}      <div className='App'>        <Switch>          {token            ?            currentPerson && currentPerson.role === 'admin'              ?              <>                <Route path='/users' component={Users}/>                <Route path='/todolist' component={Todolist}/>                <Route path='/logout' component={Logout}/>                {/*<Redirect to='/users'/>*/}              </>              :              <>                <Route path='/todolist' component={Todolist}/>                <Route path='/logout' component={Logout}/>                {/*<Redirect to='/todolist'/>*/}              </>            :            <>              <Route path='/' component={Auth}/>              <Redirect to='/'/>            </>          }          {/*<Route render={() => <h1>404 not found</h1>}/>*/}        </Switch>      </div>    </ErrorBoundary>  )}export default connect(  state => ({state: state.auth}),  {setIsLogin, logout, setCurrentPerson})(App)
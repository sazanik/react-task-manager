import React, {useEffect, useState} from 'react'import Auth from "../pages/Auth/Auth";import Todolist from '../pages/Todolist/Todolist'import Users from '../pages/Users/Users'import Logout from "../components/Logout/Logout";import ErrorBoundary from '../errorBoundary/ErrorBoundary'import {NavLink, Switch, Redirect, Route, useHistory} from 'react-router-dom'import './App.css'import {connect} from "react-redux";import {authLogout, setIsLogin, setToken, setCurrentUser, setPersonList} from "../redux/actions/auth";function App({state, setToken, setIsLogin, authLogout, setCurrentUser, setPersonList}) {  const [firstRender, setFirstRender] = useState(true)  const history = useHistory()  useEffect(() => {    console.log('-1 RENDER_APP-')    // setFirstRender(false)    // setToken(localStorage.getItem('token'))    // setCurrentUser(JSON.parse(localStorage.getItem('currentUser')))    // setAuthData(JSON.parse(localStorage.getItem('authData')))    // if (localStorage.getItem('isLogin')) {    //   setIsLogin(JSON.parse(localStorage.getItem('isLogin')))    // }    if (state.token) {      if (state.isAdmin) history.push('/users')      else history.push('/todolist')      const expirationDate = new Date(localStorage.getItem('expirationDate'))      if (expirationDate <= new Date()) {        setIsLogin(true)        localStorage.clear()        authLogout()      }    }    if (firstRender) {      console.log('-2 RENDER_APP-')    }  }, [firstRender, history, authLogout, state.token, state.isAdmin, setToken, setIsLogin, state.setIsLogin, setCurrentUser, setPersonList])  return (    <ErrorBoundary>      <div className='routing'>        {state.token          ?          <>            <span className='currentUser'>Signed in as</span>            {state.isAdmin              ?              <>                <NavLink to='/users'>Users</NavLink>                <NavLink to='/todolist'>Todolist</NavLink>              </>              : null}            <NavLink to='/logout'>Logout</NavLink>          </>          : null        }      </div>      {state.token ? <hr/> : null}      <div className='App'>        <Switch>          {state.token            ?            <>              {state.isAdmin                ? <Route exact path='/users' component={Users}/>                : null              }              <Route exact path='/todolist' component={Todolist}/>              <Route exact path='/logout' component={Logout}/>            </>            :            <>              <Route exact path='/' component={Auth}/>              <Redirect exact to='/'/>            </>          }          {/*<Route render={() => <h1>404 not found</h1>}/>*/}        </Switch>      </div>    </ErrorBoundary>  )}export default connect(  state => ({state: state.auth}),  {setToken, setIsLogin, authLogout, setCurrentUser, setPersonList})(App)